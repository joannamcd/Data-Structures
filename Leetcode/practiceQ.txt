look and say sequence 
1
11
21
1211
111221
312211
13112221

python: 

n=4, 4th term is 1211 

two functions: 
- gen next term in sequence given a term in the sequence : eg. 11 -> 21
- 

def nextNumber(s):
    result = []
    i=0
    while i < len(s):
        count = 1
        while i+1 < len(s) and s[i] == s[i+1]:
            i += 1
            count +=1 
        result.append(str(count) + s[i])
        i += 1
    return ''.join(result)

s = "1"
n = 4
for i in range(n-1):
    s = next_number(s)
    print(s)


result = 
1
11
21
1211

--------------------------------------------------------------------

59. Spiral matrix II 
Given a positive integer n, generate an nxn matrix filled with elements from 1 to n^2 in spiral order.

keep track of start column, end column, start row, end row

do one spiral, then sub problem
4 pointers: left boundary pointer, right boundary pointer, top boundary pointer, bottom boundary pointer
step 1: fill in first row 
1 2 3 4 
step 2: hit right pointer. top pointer/bottom pointer says what row we should be in.
move top pointer down. 
1 2 3 4 
      5
      6
      7
step 3: right pointer to left pointer - move right pointer decremented 
1 2 3 4 
      5
      6
10 9 8 7
step 4: decrement bottom pointer.
1 2 3 4 
12     5
11     6
10 9 8 7 

NOW, we do the center sub problem.

move left pointer to the right. 
algorithm continues exactly how we did it.
1  2  3  4 
12 13 14 5
11       6
10 9  8  7 
top pointer moves down - same pos as bottom pointer

fill in right column- top pt to bottom pt - so single value
1  2  3  4 
12 13 14 5
11    15 6
10 9  8  7 
right pointer shift to left - same pos as l pointer

1  2  3  4 
12 13 14 5
11 16 15 6
10 9  8  7 
bottom pointer up, crossed top pointer
left inc by one, crossing right pointer
so we stop. 
class Solution:
    def generateMatrix(self, n: int) -> List[List[int]]:
        mat = [[0] * n for _ in range(n)]

        left, right = 0, n-1
        top, bottom = 0, n-1
        val = 1

        while left <= right:
            #fill every val in top row
            for c in range(left, right+1):
                mat[top][c] = val
                val+=1
            top += 1
            #fill every val in right column
            for r in range(top, bottom+1):
                mat[r][right] = val
                val += 1
            right -= 1
            #fill every val in bottom row (reverse order)
            for c in range(right, left-1, -1):
                mat[bottom][c] = val
                val+=1
            bottom -= 1
            #fill every val in left column (reverse order)
            for r in range(bottom, top -1, -1):
                mat[r][left] = val
                val += 1
            left +=1
        return mat

def OneEditApart(string s1, string s2):
    str s0 = " "
    if len(s1) > len(s2):
        s0 = s1
        s1 = s2
        s2 = s0
    if len(s2) - len(s1) >1:
        return false;
    diff = false;

    for i, j in range(len(s1)):
        if s1[i] != s2[j]:
            if diff:
                return false 
            diff = true 
            if len(s2) > len(s1):
                i--
    return diff n
    


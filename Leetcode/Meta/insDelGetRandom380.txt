class RandomizedSet:

    def __init__(self):
        self.lst = []
        self.idx_map = {}
    
    def search(self, val):
        return val in self.idx_map

    def insert(self, val: int) -> bool:
        if self.search(val):
            return False
        
        self.lst.append(val)
        self.idx_map[val] = len(self.lst) - 1
        return True

    def remove(self, val: int) -> bool:
        if not self.search(val):
            return False

        idx = self.idx_map[val]
        self.lst[idx] = self.lst[-1]
        self.idx_map[self.lst[-1]] = idx
        self.lst.pop()
        del self.idx_map[val]
        return True

    def getRandom(self) -> int:
        return random.choice(self.lst)


# Your RandomizedSet object will be instantiated and called as such:
# obj = RandomizedSet()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()
'''
    the order of the elements doesn't matter (as we want a random element).
    On delete: swap the element with the last element. So, we're removing the last position instead of a position in between.
    get Random: pick a random number from 0 to (items length - 1).
    now simply just return that position's element.

More hint: two hash map or, one array & one hash map
'''